{"version":"https://jsonfeed.org/version/1.1","title":"MySQL - 标签 | 一个 PHP 菜鸟的心路历程","description":"一个北漂的内蒙汉子，喜欢瞎折腾、写东西，分享一些后端开发中的所见、所闻、所思。","home_page_url":"https://blog.yingnan.wang/","language":"zh-CN","icon":"https://blog.yingnan.wang/apple-touch-icon.png","favicon":"https://blog.yingnan.wang/favicon.ico","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://blog.yingnan.wang/images/avatar.jpg"}],"items":[{"title":"25 | MySQL 是怎么保证高可用的？","date_published":"2025-02-16T21:58:56&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/25.mysql%E6%98%AF%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84/","url":"https://blog.yingnan.wang/posts/25.mysql%E6%98%AF%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了 MySQL 高可用性保障的技术细节和应对策略。主要围绕主备库之间的数据同步和切换展开讨论，重点介绍了主备延迟的概念及可能的来源，包括备库性能差、备库压力大、大事务和备库的并行复制能力。针对主备切换过程中的不可用时间，文章提出了可靠性优先策略，并详细描述了切换流程。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了 MySQL 高可用性保障的技术细节和应对策略。主要围绕主备库之间的数据同步和切换展开讨论，重点介绍了主备延迟的概念及可能的来源，包括备库性能差、备库压力大、大事务和备库的并行复制能力。针对主备切换过程中的不可用时间，文章提出了可靠性优先策略，并详细描述了切换流程。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"24 | MySQL 是怎么保证主备一致的？","date_published":"2025-02-16T21:58:35&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/24.mysql%E6%98%AF%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E4%B8%BB%E5%A4%87%E4%B8%80%E8%87%B4%E7%9A%84/","url":"https://blog.yingnan.wang/posts/24.mysql%E6%98%AF%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E4%B8%BB%E5%A4%87%E4%B8%80%E8%87%B4%E7%9A%84/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入介绍了 MySQL 主备同步的基本原理和技术细节，重点围绕 binlog 内容、备库执行 binlog 与主库保持一致的原理展开。详细解释了主备切换流程、节点间的同步更新流程以及 binlog 的三种格式的特点和应用场景。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入介绍了 MySQL 主备同步的基本原理和技术细节，重点围绕 binlog 内容、备库执行 binlog 与主库保持一致的原理展开。详细解释了主备切换流程、节点间的同步更新流程以及 binlog 的三种格式的特点和应用场景。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"23 | MySQL 是怎么保证数据不丢的？","date_published":"2025-02-16T21:58:14&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/23.mysql%E6%98%AF%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%A2%E7%9A%84/","url":"https://blog.yingnan.wang/posts/23.mysql%E6%98%AF%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%A2%E7%9A%84/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 MySQL 数据保证机制的技术特点主要围绕 binlog 的写入流程和相关参数的设置展开。在 binlog 的写入机制中，事务执行过程中先将日志写入 binlog cache，事务提交时再将 binlog cache 写入 binlog 文件中。每个线程有自己的 binlog cache，但共用同一份 binlog 文件。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eMySQL 数据保证机制的技术特点主要围绕 binlog 的写入流程和相关参数的设置展开。在 binlog 的写入机制中，事务执行过程中先将日志写入 binlog cache，事务提交时再将 binlog cache 写入 binlog 文件中。每个线程有自己的 binlog cache，但共用同一份 binlog 文件。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"22 | MySQL 有哪些“饮鸩止渴”提高性能的方法？","date_published":"2025-02-16T21:57:55&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/22.mysql%E6%9C%89%E5%93%AA%E4%BA%9B%E9%A5%AE%E9%B8%A9%E6%AD%A2%E6%B8%B4%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95/","url":"https://blog.yingnan.wang/posts/22.mysql%E6%9C%89%E5%93%AA%E4%BA%9B%E9%A5%AE%E9%B8%A9%E6%AD%A2%E6%B8%B4%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了 MySQL 性能问题的解决方案，针对短连接风暴和查询更新语句导致的性能问题提出了解决方法。对于短连接风暴可能导致的连接数暴涨问题，提出了通过 kill connection 命令断开不工作的线程或者重启数据库并使用\u0026ndash;skip-grant-tables 参数跳过权限验证阶段的方法，但强调了这些方法可能存在的风险和损失。针对查询和更新语句导致的性能问题，文章提出了通过创建索引、改写 SQL 语句以及使用 force index 等方法来解决。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了 MySQL 性能问题的解决方案，针对短连接风暴和查询更新语句导致的性能问题提出了解决方法。对于短连接风暴可能导致的连接数暴涨问题，提出了通过 kill connection 命令断开不工作的线程或者重启数据库并使用\u0026ndash;skip-grant-tables 参数跳过权限验证阶段的方法，但强调了这些方法可能存在的风险和损失。针对查询和更新语句导致的性能问题，文章提出了通过创建索引、改写 SQL 语句以及使用 force index 等方法来解决。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"21 | 为什么我只改一行的语句，锁这么多？","date_published":"2025-02-16T21:57:32&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/21.%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%8F%AA%E6%94%B9%E4%B8%80%E8%A1%8C%E7%9A%84%E8%AF%AD%E5%8F%A5%E9%94%81%E8%BF%99%E4%B9%88%E5%A4%9A/","url":"https://blog.yingnan.wang/posts/21.%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%8F%AA%E6%94%B9%E4%B8%80%E8%A1%8C%E7%9A%84%E8%AF%AD%E5%8F%A5%E9%94%81%E8%BF%99%E4%B9%88%E5%A4%9A/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了 MySQL 加锁规则，通过详细解释加锁规则的原则、优化和 bug，以及介绍了间隙锁和 next-key lock 的概念。通过案例分析，读者可以了解 MySQL 在不同情况下的加锁方式，以及加锁规则对并发操作的影响。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了 MySQL 加锁规则，通过详细解释加锁规则的原则、优化和 bug，以及介绍了间隙锁和 next-key lock 的概念。通过案例分析，读者可以了解 MySQL 在不同情况下的加锁方式，以及加锁规则对并发操作的影响。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"20 | 幻读是什么，幻读有什么问题？","date_published":"2025-02-16T21:57:08&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/20.%E5%B9%BB%E8%AF%BB%E6%98%AF%E4%BB%80%E4%B9%88%E5%B9%BB%E8%AF%BB%E6%9C%89%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/","url":"https://blog.yingnan.wang/posts/20.%E5%B9%BB%E8%AF%BB%E6%98%AF%E4%BB%80%E4%B9%88%E5%B9%BB%E8%AF%BB%E6%9C%89%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了数据库中的幻读问题及其解决方案。以一个小表为例，通过对加锁规则的讨论引出了幻读问题，并分析了在可重复读隔离级别下可能导致的幻读现象。通过具体的例子和图示，生动地展示了幻读的产生和影响。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了数据库中的幻读问题及其解决方案。以一个小表为例，通过对加锁规则的讨论引出了幻读问题，并分析了在可重复读隔离级别下可能导致的幻读现象。通过具体的例子和图示，生动地展示了幻读的产生和影响。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"19 | 为什么我只查一行的语句，也执行这么慢？","date_published":"2025-02-16T21:56:47&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/19.%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%8F%AA%E6%9F%A5%E4%B8%80%E8%A1%8C%E7%9A%84%E8%AF%AD%E5%8F%A5%E4%B9%9F%E6%89%A7%E8%A1%8C%E8%BF%99%E4%B9%88%E6%85%A2/","url":"https://blog.yingnan.wang/posts/19.%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%8F%AA%E6%9F%A5%E4%B8%80%E8%A1%8C%E7%9A%84%E8%AF%AD%E5%8F%A5%E4%B9%9F%E6%89%A7%E8%A1%8C%E8%BF%99%E4%B9%88%E6%85%A2/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了查询性能优化中可能出现的问题及解决方法。通过构造一个包含 10 万行记录的表，展示了即使是查询单行数据，也可能出现执行缓慢的情况。文章详细分析了表被锁住的情况，包括等 MDL 锁、等 flush 或等行锁导致的情况，并提供了相应的处理方法。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了查询性能优化中可能出现的问题及解决方法。通过构造一个包含 10 万行记录的表，展示了即使是查询单行数据，也可能出现执行缓慢的情况。文章详细分析了表被锁住的情况，包括等 MDL 锁、等 flush 或等行锁导致的情况，并提供了相应的处理方法。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"18 | 为什么这些 SQL 语句逻辑相同，性能却差异巨大？","date_published":"2025-02-16T21:56:03&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/18.%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%BA%9Bsql%E8%AF%AD%E5%8F%A5%E9%80%BB%E8%BE%91%E7%9B%B8%E5%90%8C%E6%80%A7%E8%83%BD%E5%8D%B4%E5%B7%AE%E5%BC%82%E5%B7%A8%E5%A4%A7/","url":"https://blog.yingnan.wang/posts/18.%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%BA%9Bsql%E8%AF%AD%E5%8F%A5%E9%80%BB%E8%BE%91%E7%9B%B8%E5%90%8C%E6%80%A7%E8%83%BD%E5%8D%B4%E5%B7%AE%E5%BC%82%E5%B7%A8%E5%A4%A7/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了 MySQL 中相似逻辑的 SQL 语句却存在巨大性能差异的原因。通过具体案例分析和图示，解释了对索引字段进行函数操作可能导致性能下降的情况，以及隐式类型转换对性能的影响。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了 MySQL 中相似逻辑的 SQL 语句却存在巨大性能差异的原因。通过具体案例分析和图示，解释了对索引字段进行函数操作可能导致性能下降的情况，以及隐式类型转换对性能的影响。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"17 | 如何正确地显示随机消息？","date_published":"2025-02-16T21:55:26&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/17.%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%9C%B0%E6%98%BE%E7%A4%BA%E9%9A%8F%E6%9C%BA%E6%B6%88%E6%81%AF/","url":"https://blog.yingnan.wang/posts/17.%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%9C%B0%E6%98%BE%E7%A4%BA%E9%9A%8F%E6%9C%BA%E6%B6%88%E6%81%AF/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入介绍了在 MySQL 中实现随机消息显示的技术特点和优化方法。以一个英语学习 App 的性能问题为例，详细讲解了随机选择单词的 SQL 语句设计、执行流程和优化方法。文章首先介绍了内存临时表排序方法，并分析了其执行流程和扫描行数。作者还解释了内存临时表排序使用的 rowid 排序方法和 rowid 的概念。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入介绍了在 MySQL 中实现随机消息显示的技术特点和优化方法。以一个英语学习 App 的性能问题为例，详细讲解了随机选择单词的 SQL 语句设计、执行流程和优化方法。文章首先介绍了内存临时表排序方法，并分析了其执行流程和扫描行数。作者还解释了内存临时表排序使用的 rowid 排序方法和 rowid 的概念。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"16 | “order by”是怎么工作的？","date_published":"2025-02-16T21:54:47&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/16.order-by%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84/","url":"https://blog.yingnan.wang/posts/16.order-by%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了在开发应用中常见的根据指定字段排序来显示结果的需求，以及针对这种需求的 SQL 语句“order by”是如何执行的。文章首先介绍了全字段排序的执行流程，包括使用 explain 命令查看语句的执行情况、sort_buffer 的内存排序和临时文件排序等细节。接着讨论了当排序的单行长度较大时，MySQL 采用的另一种算法——rowid 排序，详细解释了其执行流程和优化效果。通过对比两种排序算法的执行过程和优化效果，可以更好地理解“order by”语句的执行原理和影响因素。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了在开发应用中常见的根据指定字段排序来显示结果的需求，以及针对这种需求的 SQL 语句“order by”是如何执行的。文章首先介绍了全字段排序的执行流程，包括使用 explain 命令查看语句的执行情况、sort_buffer 的内存排序和临时文件排序等细节。接着讨论了当排序的单行长度较大时，MySQL 采用的另一种算法——rowid 排序，详细解释了其执行流程和优化效果。通过对比两种排序算法的执行过程和优化效果，可以更好地理解“order by”语句的执行原理和影响因素。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"15 | 答疑文章（一）：日志和索引相关问题","date_published":"2025-02-12T20:29:14&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/15.%E7%AD%94%E7%96%91%E6%96%87%E7%AB%A0%E4%B8%80%E6%97%A5%E5%BF%97%E5%92%8C%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","url":"https://blog.yingnan.wang/posts/15.%E7%AD%94%E7%96%91%E6%96%87%E7%AB%A0%E4%B8%80%E6%97%A5%E5%BF%97%E5%92%8C%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文是 MySQL 实战专栏的答疑文章。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文是 MySQL 实战专栏的答疑文章。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"13 | 为什么表数据删掉一半，表文件大小不变？","date_published":"2025-02-12T20:27:22&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/13.%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%88%A0%E6%8E%89%E4%B8%80%E5%8D%8A%E8%A1%A8%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E4%B8%8D%E5%8F%98/","url":"https://blog.yingnan.wang/posts/13.%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%88%A0%E6%8E%89%E4%B8%80%E5%8D%8A%E8%A1%A8%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E4%B8%8D%E5%8F%98/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了 MySQL 中 InnoDB 引擎下的数据库表空间回收问题，特别是在删除数据后表文件大小未发生变化的情况。首先介绍了 InnoDB 表的组成结构和参数 innodb_file_per_table 的作用，建议将该参数设置为 ON 以便更好地管理表空间。随后详细说明了数据删除流程，包括记录和数据页的复用，以及删除和插入数据可能导致的空洞问题。最后，介绍了通过重建表来收缩表空间的方法，包括使用 alter table 命令和优化流程。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了 MySQL 中 InnoDB 引擎下的数据库表空间回收问题，特别是在删除数据后表文件大小未发生变化的情况。首先介绍了 InnoDB 表的组成结构和参数 innodb_file_per_table 的作用，建议将该参数设置为 ON 以便更好地管理表空间。随后详细说明了数据删除流程，包括记录和数据页的复用，以及删除和插入数据可能导致的空洞问题。最后，介绍了通过重建表来收缩表空间的方法，包括使用 alter table 命令和优化流程。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"14 | count(*) 这么慢，我该怎么办？","date_published":"2025-02-12T20:27:22&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/14.count%E8%BF%99%E4%B9%88%E6%85%A2%E6%88%91%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/","url":"https://blog.yingnan.wang/posts/14.count%E8%BF%99%E4%B9%88%E6%85%A2%E6%88%91%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 MySQL 中的 count(*) 语句在不同引擎中有不同的实现方式。MyISAM 引擎直接返回存储在磁盘上的总行数，效率高；而 InnoDB 引擎需要逐行读取数据并累积计数，导致执行速度变慢。针对频繁统计表行数的需求，建议自行计数或使用缓存系统保存计数，如 Redis 服务，但存在数据不一致和丢失更新的问题。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eMySQL 中的 count(*) 语句在不同引擎中有不同的实现方式。MyISAM 引擎直接返回存储在磁盘上的总行数，效率高；而 InnoDB 引擎需要逐行读取数据并累积计数，导致执行速度变慢。针对频繁统计表行数的需求，建议自行计数或使用缓存系统保存计数，如 Redis 服务，但存在数据不一致和丢失更新的问题。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"12 | 为什么我的 MySQL 会“抖”一下？","date_published":"2025-02-12T20:26:41&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/12.%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84mysql%E4%BC%9A%E6%8A%96%E4%B8%80%E4%B8%8B/","url":"https://blog.yingnan.wang/posts/12.%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84mysql%E4%BC%9A%E6%8A%96%E4%B8%80%E4%B8%8B/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文通过对 InnoDB 的工作机制进行比喻，解释了数据库“抖动”现象的原因。首先介绍了 InnoDB 的 WAL 机制，即写日志和内存数据页的刷新过程，分析了导致数据库刷新过程的几种情况，如 redo log 写满、系统内存不足等。指出这些情况会明显影响数据库性能，尤其是当查询需要淘汰大量脏页或者日志写满时，会导致查询响应时间明显变长甚至更新操作完全堵塞。最后，提到 InnoDB 需要有控制脏页比例的机制来尽量避免性能问题的发生。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文通过对 InnoDB 的工作机制进行比喻，解释了数据库“抖动”现象的原因。首先介绍了 InnoDB 的 WAL 机制，即写日志和内存数据页的刷新过程，分析了导致数据库刷新过程的几种情况，如 redo log 写满、系统内存不足等。指出这些情况会明显影响数据库性能，尤其是当查询需要淘汰大量脏页或者日志写满时，会导致查询响应时间明显变长甚至更新操作完全堵塞。最后，提到 InnoDB 需要有控制脏页比例的机制来尽量避免性能问题的发生。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"11 | 怎么给字符串字段加索引？","date_published":"2025-02-12T20:26:05&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/11.%E6%80%8E%E4%B9%88%E7%BB%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5%E5%8A%A0%E7%B4%A2%E5%BC%95/","url":"https://blog.yingnan.wang/posts/11.%E6%80%8E%E4%B9%88%E7%BB%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5%E5%8A%A0%E7%B4%A2%E5%BC%95/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文介绍了如何给字符串字段加索引以及前缀索引对查询性能的影响。首先，文章讨论了在支持邮箱登录的系统中，如何在邮箱字段上建立合理的索引。通过对比全字段索引和前缀索引的执行过程，阐述了前缀索引可能增加查询成本的情况。接着，文章提出了确定前缀长度的方法，即通过统计索引上不同值的数量来选择合适的前缀长度。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文介绍了如何给字符串字段加索引以及前缀索引对查询性能的影响。首先，文章讨论了在支持邮箱登录的系统中，如何在邮箱字段上建立合理的索引。通过对比全字段索引和前缀索引的执行过程，阐述了前缀索引可能增加查询成本的情况。接着，文章提出了确定前缀长度的方法，即通过统计索引上不同值的数量来选择合适的前缀长度。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"10 | MySQL 为什么有时候会选错索引？","date_published":"2025-02-12T20:25:41&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/10.mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E6%97%B6%E5%80%99%E4%BC%9A%E9%80%89%E9%94%99%E7%B4%A2%E5%BC%95/","url":"https://blog.yingnan.wang/posts/10.mysql%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E6%97%B6%E5%80%99%E4%BC%9A%E9%80%89%E9%94%99%E7%B4%A2%E5%BC%95/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了 MySQL 索引选择问题，通过一个案例展示了错误的索引选择可能导致查询性能下降的情况。首先介绍了一个简单的表结构和插入数据的存储过程，然后展示了一条查询语句的执行情况。通过对表进行数据操作后再次执行相同的查询语句，发现 MySQL 选择了错误的索引，导致了性能下降。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了 MySQL 索引选择问题，通过一个案例展示了错误的索引选择可能导致查询性能下降的情况。首先介绍了一个简单的表结构和插入数据的存储过程，然后展示了一条查询语句的执行情况。通过对表进行数据操作后再次执行相同的查询语句，发现 MySQL 选择了错误的索引，导致了性能下降。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"09 | 普通索引和唯一索引，应该怎么选择？","date_published":"2025-02-11T08:51:23&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/9.%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95%E5%92%8C%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E9%80%89%E6%8B%A9/","url":"https://blog.yingnan.wang/posts/9.%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95%E5%92%8C%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E9%80%89%E6%8B%A9/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了普通索引和唯一索引在不同业务场景下的选择，重点从性能角度对比了它们在查询和更新语句中的影响。在查询过程中，普通索引需要额外的查找和判断操作，但由于 InnoDB 的数据是按数据页为单位读写，性能差距微乎其微。而在更新过程中，普通索引可以利用 change buffer 来减少磁盘读取，从而提升性能。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了普通索引和唯一索引在不同业务场景下的选择，重点从性能角度对比了它们在查询和更新语句中的影响。在查询过程中，普通索引需要额外的查找和判断操作，但由于 InnoDB 的数据是按数据页为单位读写，性能差距微乎其微。而在更新过程中，普通索引可以利用 change buffer 来减少磁盘读取，从而提升性能。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"08 | 事务到底是隔离的还是不隔离的？","date_published":"2025-02-11T08:50:52&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/8.%E4%BA%8B%E5%8A%A1%E5%88%B0%E5%BA%95%E6%98%AF%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%98%E6%98%AF%E4%B8%8D%E9%9A%94%E7%A6%BB%E7%9A%84/","url":"https://blog.yingnan.wang/posts/8.%E4%BA%8B%E5%8A%A1%E5%88%B0%E5%BA%95%E6%98%AF%E9%9A%94%E7%A6%BB%E7%9A%84%E8%BF%98%E6%98%AF%E4%B8%8D%E9%9A%94%E7%A6%BB%E7%9A%84/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了事务隔离级别对于事务可见性的影响，并重点介绍了可重复读隔离级别下的事务视图和行锁的概念。文章详细解释了在 MySQL 中 MVCC 实现时使用的一致性读视图的概念，以及 InnoDB 如何利用多版本数据实现“秒级创建快照”的能力。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了事务隔离级别对于事务可见性的影响，并重点介绍了可重复读隔离级别下的事务视图和行锁的概念。文章详细解释了在 MySQL 中 MVCC 实现时使用的一致性读视图的概念，以及 InnoDB 如何利用多版本数据实现“秒级创建快照”的能力。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"07 | 行锁功过：怎么减少行锁对性能的影响？","date_published":"2025-02-11T08:50:23&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/7.%E8%A1%8C%E9%94%81%E5%8A%9F%E8%BF%87%E6%80%8E%E4%B9%88%E5%87%8F%E5%B0%91%E8%A1%8C%E9%94%81%E5%AF%B9%E6%80%A7%E8%83%BD%E7%9A%84%E5%BD%B1%E5%93%8D/","url":"https://blog.yingnan.wang/posts/7.%E8%A1%8C%E9%94%81%E5%8A%9F%E8%BF%87%E6%80%8E%E4%B9%88%E5%87%8F%E5%B0%91%E8%A1%8C%E9%94%81%E5%AF%B9%E6%80%A7%E8%83%BD%E7%9A%84%E5%BD%B1%E5%93%8D/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文主要讨论了 MySQL 的行锁对数据库性能的影响以及如何通过合理的事务设计来减少锁冲突，提升并发度。文章首先介绍了行锁的概念和两阶段锁协议，强调了行锁在事务结束时才会释放的特点。通过一个电影票在线交易业务的例子，说明了如何合理安排事务中的操作顺序以减少锁等待，提升并发度。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文主要讨论了 MySQL 的行锁对数据库性能的影响以及如何通过合理的事务设计来减少锁冲突，提升并发度。文章首先介绍了行锁的概念和两阶段锁协议，强调了行锁在事务结束时才会释放的特点。通过一个电影票在线交易业务的例子，说明了如何合理安排事务中的操作顺序以减少锁等待，提升并发度。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"06 | 全局锁和表锁：给表加个字段怎么有这么多阻碍？","date_published":"2025-02-11T08:49:45&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/6.%E5%85%A8%E5%B1%80%E9%94%81%E5%92%8C%E8%A1%A8%E9%94%81%E7%BB%99%E8%A1%A8%E5%8A%A0%E4%B8%AA%E5%AD%97%E6%AE%B5%E6%80%8E%E4%B9%88%E6%9C%89%E8%BF%99%E4%B9%88%E5%A4%9A%E9%98%BB%E7%A2%8D/","url":"https://blog.yingnan.wang/posts/6.%E5%85%A8%E5%B1%80%E9%94%81%E5%92%8C%E8%A1%A8%E9%94%81%E7%BB%99%E8%A1%A8%E5%8A%A0%E4%B8%AA%E5%AD%97%E6%AE%B5%E6%80%8E%E4%B9%88%E6%9C%89%E8%BF%99%E4%B9%88%E5%A4%9A%E9%98%BB%E7%A2%8D/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 MySQL 的锁设计旨在处理并发访问问题，主要分为全局锁、表级锁和行锁。全局锁通过 Flush tables with read lock (FTWRL) 命令实现对整个数据库实例的加锁，常用于全库逻辑备份，而表级锁一般是在数据库引擎不支持行锁的时候才会被用到。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eMySQL 的锁设计旨在处理并发访问问题，主要分为全局锁、表级锁和行锁。全局锁通过 Flush tables with read lock (FTWRL) 命令实现对整个数据库实例的加锁，常用于全库逻辑备份，而表级锁一般是在数据库引擎不支持行锁的时候才会被用到。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"05 | 深入浅出索引（下）","date_published":"2025-02-10T18:39:22&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/5.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%B4%A2%E5%BC%95-%E4%B8%8B/","url":"https://blog.yingnan.wang/posts/5.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%B4%A2%E5%BC%95-%E4%B8%8B/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入探讨了 MySQL 索引相关的概念，包括覆盖索引、最左前缀原则和索引下推。覆盖索引能减少树的搜索次数，提升查询性能；最左前缀原则强调索引的复用能力，建议为高频请求创建联合索引；索引下推优化可减少回表次数，提高查询效率。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入探讨了 MySQL 索引相关的概念，包括覆盖索引、最左前缀原则和索引下推。覆盖索引能减少树的搜索次数，提升查询性能；最左前缀原则强调索引的复用能力，建议为高频请求创建联合索引；索引下推优化可减少回表次数，提高查询效率。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"04 | 深入浅出索引（上）","date_published":"2025-02-10T18:36:50&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/4.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%B4%A2%E5%BC%95-%E4%B8%8A/","url":"https://blog.yingnan.wang/posts/4.%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%B4%A2%E5%BC%95-%E4%B8%8A/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文介绍了 MySQL 选择 B+ 树结构来存储数据的原因，并分析了数据库索引的重要性以及三种常见的索引模型：哈希表、有序数组和搜索树。文章重点介绍了 InnoDB 采用的 B+ 树索引模型，以及 B+ 树在维护索引有序性和索引维护过程中的作用。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文介绍了 MySQL 选择 B+ 树结构来存储数据的原因，并分析了数据库索引的重要性以及三种常见的索引模型：哈希表、有序数组和搜索树。文章重点介绍了 InnoDB 采用的 B+ 树索引模型，以及 B+ 树在维护索引有序性和索引维护过程中的作用。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"03 | 事务隔离：为什么你改了我还看不见？","date_published":"2025-02-10T08:50:39&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/3.%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%94%B9%E4%BA%86%E6%88%91%E8%BF%98%E7%9C%8B%E4%B8%8D%E8%A7%81/","url":"https://blog.yingnan.wang/posts/3.%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%94%B9%E4%BA%86%E6%88%91%E8%BF%98%E7%9C%8B%E4%B8%8D%E8%A7%81/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入介绍了事务隔离的重要性以及 MySQL 中事务隔离的实现方式。通过生动的转账例子引出了事务的概念，强调了事务的一致性和原子性。随后详细介绍了隔离级别的概念，包括读未提交、读提交、可重复读和串行化，并通过具体例子解释了不同隔离级别下的行为差异。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入介绍了事务隔离的重要性以及 MySQL 中事务隔离的实现方式。通过生动的转账例子引出了事务的概念，强调了事务的一致性和原子性。随后详细介绍了隔离级别的概念，包括读未提交、读提交、可重复读和串行化，并通过具体例子解释了不同隔离级别下的行为差异。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"02 | 日志系统：一条 SQL 更新语句是如何执行的？","date_published":"2025-02-09T22:27:50&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/2.%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E4%B8%80%E6%9D%A1sql%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/","url":"https://blog.yingnan.wang/posts/2.%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E4%B8%80%E6%9D%A1sql%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文深入介绍了 MySQL 更新语句的执行流程和日志系统设计，包括重做日志和归档日志的特点，以及两阶段提交的重要性。可以从中了解 MySQL 的日志系统设计和执行过程，以及保证数据安全和一致性的关键参数设置建议。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文深入介绍了 MySQL 更新语句的执行流程和日志系统设计，包括重做日志和归档日志的特点，以及两阶段提交的重要性。可以从中了解 MySQL 的日志系统设计和执行过程，以及保证数据安全和一致性的关键参数设置建议。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"},{"title":"01 | 基础架构：一条 SQL 查询语句是如何执行的？","date_published":"2025-02-08T08:52:58&#43;08:00","date_modified":"2025-02-21T00:55:37Z","id":"https://blog.yingnan.wang/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/","url":"https://blog.yingnan.wang/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/","authors":[{"name":"w2lz","url":"https://github.com/w2lz","avatar":"https://gravatar.loli.net/avatar/72786a26cc6c5dc19ea50e6408879033?s=32&amp;d=mp"}],"tags":["MySQL 实战 45 讲","MySQL"],"summary":" 摘要 本文将把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。 ","content_html":"\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fa-fw fa-solid fa-quote-right\" aria-hidden=\"true\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fa-solid fa-angle-right fa-fw\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003e本文将把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e"}]}