[{"categories":["MySQL 实战 45 讲","MySQL"],"content":"一条 SQL 查询语句是如何执行的","date":"2025-02-08","objectID":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/","tags":["MySQL 实战 45 讲","MySQL"],"title":"01 | 基础架构：一条 SQL 查询语句是如何执行的？","uri":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/"},{"categories":["MySQL 实战 45 讲","MySQL"],"content":" 摘要 本文将把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。 平时使用数据库，看到的通常都是一个整体。比如，你有个最简单的表，表里只有一个 ID 字段，在执行下面这个查询语句时： mysql\u003e select * from T where ID = 10； 我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在 MySQL 内部的执行过程。下面的是 MySQL 的基本架构示意图，从中可以清楚地看到 SQL 语句在 MySQL 的各个功能模块中的执行过程。 大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。 Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。 而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。 也就是说，在执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。不过，也可以通过指定存储引擎的类型来选择别的引擎，比如在 create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，支持的功能也不同。从图中不难看出，不同的存储引擎共用一个 Server 层，也就是从连接器到执行器的部分。 ","date":"2025-02-08","objectID":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/:0:0","tags":["MySQL 实战 45 讲","MySQL"],"title":"01 | 基础架构：一条 SQL 查询语句是如何执行的？","uri":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/"},{"categories":["MySQL 实战 45 讲","MySQL"],"content":"1 连接器 第一步，需要会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的： mysql -h$ip -P$port -u$user -p 输完命令之后，就需要在交互对话里面输入密码。虽然密码也可以直接跟在 -p 后面写在命令行中，但这样可能会导致密码泄露。如果连的是生产服务器，强烈建议不要这么做。连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是输入的用户名和密码。 如果用户名或密码不对，就会收到一个\"Access denied for user\"的错误，然后客户端程序结束执行。 如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。 这就意味着，一个用户成功建立连接后，即使用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。 连接完成后，如果没有后续的动作，这个连接就处于空闲状态，可以在 show processlist 命令中看到它。文本中这个图是 show processlist 的结果，其中的 Command 列显示为“Sleep”的这一行，就表示现在系统里面有一个空闲连接。 客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果要继续，就需要重连，然后再执行请求了。 数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。建立连接的过程通常是比较复杂的，所以建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。 但是全部使用长连接后，可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。怎么解决这个问题呢？可以考虑以下两种方案。 定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。 如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。 ","date":"2025-02-08","objectID":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/:1:0","tags":["MySQL 实战 45 讲","MySQL"],"title":"01 | 基础架构：一条 SQL 查询语句是如何执行的？","uri":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/"},{"categories":["MySQL 实战 45 讲","MySQL"],"content":"2 查询缓存 连接建立完成后，就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。 MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。 如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。 但是大多数情况下建议不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。 查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能很费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。 好在 MySQL 也提供了这种“按需使用”的方式。可以将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样： mysql\u003e select SQL_CACHE * from T where ID = 10； 需要注意的是，MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。 ","date":"2025-02-08","objectID":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/:2:0","tags":["MySQL 实战 45 讲","MySQL"],"title":"01 | 基础架构：一条 SQL 查询语句是如何执行的？","uri":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/"},{"categories":["MySQL 实战 45 讲","MySQL"],"content":"3 分析器 如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。 分析器先会做“词法分析”。输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。 MySQL 从输入的\"select\"这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。 做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断输入的这个 SQL 语句是否满足 MySQL 语法。 如果语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 select 少打了开头的字母“s”。 mysql\u003e elect * from t where ID = 1; ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'elect * from t where ID=1' at line 1 一般语法错误会提示第一个出现错误的位置，所以要关注的是紧接“use near”的内容。 ","date":"2025-02-08","objectID":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/:3:0","tags":["MySQL 实战 45 讲","MySQL"],"title":"01 | 基础架构：一条 SQL 查询语句是如何执行的？","uri":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/"},{"categories":["MySQL 实战 45 讲","MySQL"],"content":"4 优化器 经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。 优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如执行下面这样的语句，这个语句是执行两个表的 join： mysql\u003e select * from t1 join t2 using(ID) where t1.c = 10 and t2.d = 20; 既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。 也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。 这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。 ","date":"2025-02-08","objectID":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/:4:0","tags":["MySQL 实战 45 讲","MySQL"],"title":"01 | 基础架构：一条 SQL 查询语句是如何执行的？","uri":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/"},{"categories":["MySQL 实战 45 讲","MySQL"],"content":"5 执行器 MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。 开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。 mysql\u003e select * from T where ID = 10; ERROR 1142 (42000): SELECT command denied to user 'b'@'localhost' for table 'T' 如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。比如这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的： 调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中； 调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。 执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。 至此，这个语句就执行完成了。 对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。 你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。 在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。 ","date":"2025-02-08","objectID":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/:5:0","tags":["MySQL 实战 45 讲","MySQL"],"title":"01 | 基础架构：一条 SQL 查询语句是如何执行的？","uri":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/"},{"categories":["MySQL 实战 45 讲","MySQL"],"content":"6 问题 问：如果表 T 中没有字段 k，而执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。这个错误是在上面提到的哪个阶段报出来的呢？ ","date":"2025-02-08","objectID":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/:6:0","tags":["MySQL 实战 45 讲","MySQL"],"title":"01 | 基础架构：一条 SQL 查询语句是如何执行的？","uri":"/posts/1.%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/"},{"categories":null,"content":"本页面记录了自「一个 PHP 菜鸟的心路历程」博客创建以来，所有的打赏记录。感谢大家的支持！","date":"2024-11-17","objectID":"/reward/","tags":null,"title":"赞赏记录","uri":"/reward/"},{"categories":null,"content":" 给博主买杯卡布奇诺～ 赞赏 支付宝 微信 本页面记录了自「一个 PHP 菜鸟的心路历程」博客创建以来，所有的打赏记录。感谢大家的支持！❤️ 总计 ¥666.00 单笔最大 w2lz 的 ¥666.00 w2lz ¥666.00 w2lz 通过 支付宝 打赏了 ¥666.00 备注：希望一切顺顺利利！ 2024-11-17 - 次阅读 ","date":"2024-11-17","objectID":"/reward/:0:0","tags":null,"title":"赞赏记录","uri":"/reward/"},{"categories":null,"content":"互联网的广大朋友们，欢迎光临我的小博客！欢迎留言！","date":"2024-11-17","objectID":"/guestbook/","tags":null,"title":"留言","uri":"/guestbook/"},{"categories":null,"content":"- 次阅读 Welcome 互联网的广大朋友们，欢迎光临我的小博客！欢迎留言！ 温馨提示，音乐自动播放，请带好耳机～ From playlist, Powered By mmt-netease 给博主买杯卡布奇诺～ 赞赏 支付宝 微信 - 次阅读 ","date":"2024-11-17","objectID":"/guestbook/:0:0","tags":null,"title":"留言","uri":"/guestbook/"},{"categories":null,"content":"「一个 PHP 菜鸟的心路历程」的友情链接","date":"2024-11-17","objectID":"/friends/","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"本页共 - 次阅读 ","date":"2024-11-17","objectID":"/friends/:0:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"基本信息 网络 ID：w2lz 头像：https://blog.yingnan.wang/images/avatar.jpg URL：https://blog.yingnan.wang 描述：一个 PHP 菜鸟的心路历程 - 「Talk is cheap. Show me the code.」（或者你对我的看法😉） ","date":"2024-11-17","objectID":"/friends/:1:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"友链要求 友情提醒：那些不尊重他人劳动成果，转载不加出处的，或恶意行为的网站，还请你不要来进行交换了。 原创博客文章至少 10 篇以上，内容健康，无违法违规内容。 网站创建时间至少 3 个月以上，且长期保持更新。（频率至少一年 1 篇） 目前仅限个人非商业博客/网站。（商务合作邮件联系） 满足上述基本要求，互换友链请按以下格式在评论区留言： ```yaml - nickname: \u003cyour nickname\u003e avatar: \u003cyour avatar\u003e url: \u003cyour site link\u003e description: \u003cdescription of your site\u003e ``` ","date":"2024-11-17","objectID":"/friends/:2:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"失效链接 公示一个月后删除，如更换域名请及时联系！ ","date":"2024-11-17","objectID":"/friends/:3:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":" 不卑不亢，不矜不伐，戒骄戒躁 不嗔不怒，不争不弃，独善其身 —— 自我期许 ","date":"2024-11-17","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于作者 人知道的越多，就会发现无知的越多。有更广袤的世界可以探索，真是莫大的快乐！ 一个北漂的内蒙汉子，主要从事Golang、PHP和Java相关的开发工作。 👨‍💻 一名后端开发工程师 🫶 一个 PHP 菜鸟的心路历程 作者 📚 专业：计算机科学与技术  关注 Follow：w2lz  微信公众号：一个 PHP 菜鸟的心路历程 ","date":"2024-11-17","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于博客 博客内容主要以后端开发方向为主，分享一些有趣程序、技巧、开发教程、心情和学习记录等。 你可以通过我的微信公众号、GitHub 或 RSS 来订阅本博客。 /** * Licensed under CC BY-NC-SA 4.0 * @since 2018-05-28 20:01:01 */ package main import \"fmt\" type Blog struct { Name string `json:\"name\"` Author string `json:\"author\"` Url string `json:\"url\"` } func main() { blog := Blog{ Name: \"一个 PHP 菜鸟的心路历程\", Author: \"王二愣子\", Url: \"https://blog.yingnan.wang\", } fmt.Println(blog.Name) } 博客历史 博客 使用 Hugo 搭建，使用 FixIt 主题，取名为“一个 PHP 菜鸟的心路历程”。 2024-11-17 23:00:00 ","date":"2024-11-17","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"商务合作 广告投放、其他平台同步授权等事宜请邮件与我联系。 📮 邮箱：wangyingnan@88.com（备注来意） - 次阅读 ","date":"2024-11-17","objectID":"/about/:3:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["GitHub"],"content":"w2lz/w2lz.github.io: 博客构建档（HTML \u0026 Markdown）","date":"2024-11-17","objectID":"/projects/w2lz/w2lz.github.io/","tags":[],"title":"博客构建档（HTML \u0026 Markdown）","uri":"/projects/w2lz/w2lz.github.io/"},{"categories":["GitHub"],"content":"一个 PHP 菜鸟的心路历程 共计 3 篇文章 ","date":"2024-11-17","objectID":"/projects/w2lz/w2lz.github.io/:1:0","tags":[],"title":"博客构建档（HTML \u0026 Markdown）","uri":"/projects/w2lz/w2lz.github.io/"},{"categories":["GitHub"],"content":"2025 共计 1 篇文章 02-08 01 | 基础架构：一条 SQL 查询语句是如何执行的？ ","date":"2024-11-17","objectID":"/projects/w2lz/w2lz.github.io/:2:0","tags":[],"title":"博客构建档（HTML \u0026 Markdown）","uri":"/projects/w2lz/w2lz.github.io/"},{"categories":["GitHub"],"content":"2024 共计 2 篇文章 11-17 博客构建档（HTML \u0026 Markdown） 11-17 一个 PHP 菜鸟的心路历程 ","date":"2024-11-17","objectID":"/projects/w2lz/w2lz.github.io/:3:0","tags":[],"title":"博客构建档（HTML \u0026 Markdown）","uri":"/projects/w2lz/w2lz.github.io/"},{"categories":["GitHub"],"content":"w2lz/hugo blog: 一个 PHP 菜鸟的心路历程","date":"2024-11-17","objectID":"/projects/w2lz/hugo-blog/","tags":[],"title":"一个 PHP 菜鸟的心路历程","uri":"/projects/w2lz/hugo-blog/"},{"categories":["GitHub"],"content":"一个 PHP 菜鸟的心路历程 站名“一个 PHP 菜鸟的心路历程”，主要是为了纪念刚入行的日子。 博客基于 Hugo 和 FixIt 搭建，建站的初衷不是为了炫耀所知，而是记录无知。 博客内容主要以 Web 后端开发方向为主，分享一些有趣程序、技巧、开发教程、心情和学习记录等。 你可以通过我的微信公众号、GitHub 或 RSS 来订阅本博客。 ","date":"2024-11-17","objectID":"/projects/w2lz/hugo-blog/:1:0","tags":[],"title":"一个 PHP 菜鸟的心路历程","uri":"/projects/w2lz/hugo-blog/"},{"categories":["GitHub"],"content":"Content 归档 分类 合集 标签 ","date":"2024-11-17","objectID":"/projects/w2lz/hugo-blog/:2:0","tags":[],"title":"一个 PHP 菜鸟的心路历程","uri":"/projects/w2lz/hugo-blog/"},{"categories":["GitHub"],"content":"Source 博客相关源码： Hugo FixIt 相关 更多 ","date":"2024-11-17","objectID":"/projects/w2lz/hugo-blog/:3:0","tags":[],"title":"一个 PHP 菜鸟的心路历程","uri":"/projects/w2lz/hugo-blog/"},{"categories":["GitHub"],"content":"Roadmap ","date":"2024-11-17","objectID":"/projects/w2lz/hugo-blog/:4:0","tags":[],"title":"一个 PHP 菜鸟的心路历程","uri":"/projects/w2lz/hugo-blog/"},{"categories":["GitHub"],"content":"Project setup 本博客已部署到 Vercel 和 GitHub Pages，工作流如下图所示： ▸ .github/ # GitHub configuration ▸ .scripts/ # custom scripts ▸ .shell/ # shell commands for hugo project, entrance: hugo_main.sh ▸ archetypes/ # page archetypes (like scaffolds of archetypes) ▸ assets/ # css, js, third-party libraries etc. ▸ config/ # configuration files ▸ content/ # markdown files for hugo project ▸ private/ # private submodule for encrypted content ▸ data/ # blog data (allow: yaml, json, toml), e.g. friends.yml ▸ public/ # build directory ▸ static/ # static files, e.g. favicon.ico ▸ themes/ # theme submodules ","date":"2024-11-17","objectID":"/projects/w2lz/hugo-blog/:5:0","tags":[],"title":"一个 PHP 菜鸟的心路历程","uri":"/projects/w2lz/hugo-blog/"},{"categories":["GitHub"],"content":"System requirements Go Hugo: \u003e= 0.134.1 (extended version) ","date":"2024-11-17","objectID":"/projects/w2lz/hugo-blog/:5:1","tags":[],"title":"一个 PHP 菜鸟的心路历程","uri":"/projects/w2lz/hugo-blog/"},{"categories":["GitHub"],"content":"Clone 首先点上 Star 😜，然后下载源码： git clone --recursive git@github.com:w2lz/hugo-blog.git \u0026\u0026 cd hugo-blog 下载源码后，可以通过下面的方式启动这个博客。 ","date":"2024-11-17","objectID":"/projects/w2lz/hugo-blog/:5:2","tags":[],"title":"一个 PHP 菜鸟的心路历程","uri":"/projects/w2lz/hugo-blog/"},{"categories":["GitHub"],"content":"Hugo # Development environment hugo server --disableFastRender --navigateToChanged --bind 0.0.0.0 -O # Production environment hugo server --disableFastRender --navigateToChanged --environment production --bind 0.0.0.0 -O ","date":"2024-11-17","objectID":"/projects/w2lz/hugo-blog/:5:3","tags":[],"title":"一个 PHP 菜鸟的心路历程","uri":"/projects/w2lz/hugo-blog/"},{"categories":["GitHub"],"content":"License 此存储库中的文本、图像和视频等内容采用 CC BY-NC-SA 4.0 许可 此存储库中的代码采用 MIT 许可 content/private 目录不在任何许可范围内 ","date":"2024-11-17","objectID":"/projects/w2lz/hugo-blog/:6:0","tags":[],"title":"一个 PHP 菜鸟的心路历程","uri":"/projects/w2lz/hugo-blog/"},{"categories":["GitHub"],"content":"Author w2lz ","date":"2024-11-17","objectID":"/projects/w2lz/hugo-blog/:7:0","tags":[],"title":"一个 PHP 菜鸟的心路历程","uri":"/projects/w2lz/hugo-blog/"},{"categories":null,"content":"一个 PHP 菜鸟的心路历程博客私密文章 ","date":"0001-01-01","objectID":"/readme/:1:0","tags":null,"title":"","uri":"/readme/"}]